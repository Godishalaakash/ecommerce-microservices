{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 const express = require('express');\
const cors = require('cors');\
const helmet = require('helmet');\
const rateLimit = require('express-rate-limit');\
const mongoose = require('mongoose');\
\
const app = express();\
const PORT = process.env.PORT || 3000;\
\
// Security middleware\
app.use(helmet());\
app.use(cors());\
app.use(express.json());\
\
// Rate limiting\
const limiter = rateLimit(\{\
  windowMs: 15 * 60 * 1000, // 15 minutes\
  max: 100, // limit each IP to 100 requests per windowMs\
  message: 'Too many requests from this IP, please try again later.'\
\});\
app.use(limiter);\
\
// Connect to MongoDB\
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/ecommerce', \{\
  useNewUrlParser: true,\
  useUnifiedTopology: true\
\});\
\
// Health check endpoint\
app.get('/health', (req, res) => \{\
  res.status(200).json(\{\
    status: 'healthy',\
    service: 'ecommerce-api',\
    timestamp: new Date().toISOString(),\
    uptime: process.uptime(),\
    version: '1.0.0'\
  \});\
\});\
\
// API status endpoint\
app.get('/api/status', (req, res) => \{\
  res.json(\{\
    message: 'E-commerce Microservices Platform API',\
    version: '1.0.0',\
    services: \{\
      userService: 'active',\
      productService: 'active',\
      orderService: 'active',\
      paymentService: 'active'\
    \},\
    performance: \{\
      dailyTransactions: '50,000+',\
      responseTime: 'sub-second',\
      uptime: '99.9%'\
    \}\
  \});\
\});\
\
// Sample API endpoints\
app.get('/api/products', (req, res) => \{\
  res.json(\{\
    message: 'Product catalog endpoint',\
    products: [\
      \{ id: 1, name: 'Laptop', price: 999.99, category: 'Electronics' \},\
      \{ id: 2, name: 'Phone', price: 699.99, category: 'Electronics' \},\
      \{ id: 3, name: 'Book', price: 19.99, category: 'Education' \}\
    ]\
  \});\
\});\
\
app.get('/api/users', (req, res) => \{\
  res.json(\{\
    message: 'User management endpoint',\
    totalUsers: 15000,\
    activeUsers: 12500\
  \});\
\});\
\
// 404 handler\
app.use('*', (req, res) => \{\
  res.status(404).json(\{\
    error: 'Endpoint not found',\
    path: req.originalUrl,\
    availableEndpoints: ['/health', '/api/status', '/api/products', '/api/users']\
  \});\
\});\
\
// Error handler\
app.use((err, req, res, next) => \{\
  console.error(err.stack);\
  res.status(500).json(\{\
    error: 'Internal server error',\
    message: 'Something went wrong!'\
  \});\
\});\
\
const server = app.listen(PORT, () => \{\
  console.log(`\uc0\u55357 \u56960  E-commerce API running on port $\{PORT\}`);\
  console.log(`\uc0\u55357 \u56599  Health check: http://localhost:$\{PORT\}/health`);\
  console.log(`\uc0\u55357 \u56522  API status: http://localhost:$\{PORT\}/api/status`);\
\});\
\
module.exports = app;}